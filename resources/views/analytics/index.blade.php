@extends('layouts.app')

@section('title', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–¥–∞—á - Task Management')
@section('description', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á')

@section('content')
<style>
    /* –°—Ç–∏–ª–∏ –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π */
    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .main.container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 40px 20px;
    }

    /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */
    .page-header {
        text-align: center;
        margin-bottom: 40px;
    }

    .page-header h1 {
        font-size: 3rem;
        font-weight: 700;
        color: white;
        margin-bottom: 15px;
        text-shadow: 0 4px 8px rgba(0,0,0,0.3);
    }

    .page-header .subtitle {
        font-size: 1.2rem;
        color: rgba(255,255,255,0.9);
        margin-bottom: 30px;
    }

    /* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 40px;
    }

    .stat-card {
        background: white;
        border-radius: 20px;
        padding: 25px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
        transition: transform 0.3s ease;
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #667eea, #764ba2);
    }

    .stat-card:hover {
        transform: translateY(-5px);
    }

    .stat-icon {
        font-size: 2.5rem;
        margin-bottom: 15px;
        display: block;
    }

    .stat-value {
        font-size: 2.5rem;
        font-weight: 700;
        color: #333;
        margin-bottom: 5px;
    }

    .stat-label {
        color: #666;
        font-size: 1rem;
        font-weight: 600;
    }

    .stat-change {
        font-size: 0.9rem;
        margin-top: 10px;
        padding: 5px 10px;
        border-radius: 15px;
        display: inline-block;
    }

    .stat-change.positive {
        background: rgba(0, 184, 148, 0.1);
        color: #00b894;
    }

    .stat-change.neutral {
        background: rgba(116, 185, 255, 0.1);
        color: #74b9ff;
    }

    /* –§–∏–ª—å—Ç—Ä—ã */
    .filters-section {
        background: white;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        margin-bottom: 30px;
        position: relative;
        overflow: hidden;
    }

    .filters-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #667eea, #764ba2);
    }

    .filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        align-items: end;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .filter-group label {
        font-weight: 600;
        color: #333;
        font-size: 0.9rem;
    }

    .filter-input {
        padding: 12px 16px;
        border-radius: 12px;
        border: 2px solid #e9ecef;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: #f8f9fa;
    }

    .filter-input:focus {
        outline: 0;
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102,126,234,.25);
        background: white;
    }

    .btn {
        padding: 12px 24px;
        border-radius: 50px;
        font-weight: 600;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        box-shadow: 0 4px 12px rgba(102,126,234,0.3);
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(102,126,234,0.4);
    }

    /* –ì—Ä–∞—Ñ–∏–∫–∏ */
    .charts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
        gap: 30px;
        margin-bottom: 40px;
    }

    .chart-card {
        background: white;
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
        min-height: 400px;
    }

    .chart-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #667eea, #764ba2);
    }

    .chart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .chart-title {
        font-size: 1.4rem;
        font-weight: 600;
        color: #333;
    }

    .chart-controls {
        display: flex;
        gap: 10px;
    }

    .chart-type-btn {
        padding: 6px 12px;
        border: 2px solid #e9ecef;
        background: white;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.8rem;
    }

    .chart-type-btn.active {
        border-color: #667eea;
        background: #667eea;
        color: white;
    }

    .chart-container {
        position: relative;
        height: 350px;
        width: 100%;
    }

    .loading-spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 350px;
        font-size: 1.2rem;
        color: #666;
    }

    .loading-spinner::before {
        content: '';
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-right: 15px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
    @media (max-width: 768px) {
        .page-header h1 { font-size: 2.5rem; }
        .charts-grid { grid-template-columns: 1fr; }
        .filters-grid { grid-template-columns: 1fr; }
        .stats-grid { grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); }
        .chart-card { padding: 20px; min-height: 300px; }
        .chart-container { height: 250px; }
    }
</style>

<!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã -->
<div class="page-header">
    <h1>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–¥–∞—á</h1>
    <p class="subtitle">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å</p>
</div>

<!-- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
<div class="stats-grid">
    <div class="stat-card">
        <span class="stat-icon">üìã</span>
        <div class="stat-value">{{ $overallStats['total_tasks'] }}</div>
        <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–¥–∞—á</div>
    </div>

    <div class="stat-card">
        <span class="stat-icon">‚úÖ</span>
        <div class="stat-value">{{ $overallStats['completed_tasks'] }}</div>
        <div class="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
        <div class="stat-change positive">{{ $overallStats['completion_rate'] }}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>
    </div>

    <div class="stat-card">
        <span class="stat-icon">‚ö°</span>
        <div class="stat-value">{{ $overallStats['in_progress_tasks'] }}</div>
        <div class="stat-label">–í —Ä–∞–±–æ—Ç–µ</div>
    </div>

    <div class="stat-card">
        <span class="stat-icon">üìù</span>
        <div class="stat-value">{{ $overallStats['todo_tasks'] }}</div>
        <div class="stat-label">–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é</div>
    </div>

    <div class="stat-card">
        <span class="stat-icon">üî•</span>
        <div class="stat-value">{{ $overallStats['completed_last_30_days'] }}</div>
        <div class="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ 30 –¥–Ω–µ–π</div>
    </div>
</div>

<!-- –§–∏–ª—å—Ç—Ä—ã -->
<div class="filters-section">
    <h3 style="margin-bottom: 20px; color: #333;">üîç –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤</h3>
    <div class="filters-grid">
        <div class="filter-group">
            <label for="period">–ü–µ—Ä–∏–æ–¥</label>
            <select id="period" class="filter-input">
                <option value="month">–ú–µ—Å—è—Ü</option>
                <option value="week">–ù–µ–¥–µ–ª—è</option>
                <option value="year">–ì–æ–¥</option>
            </select>
        </div>

        <div class="filter-group">
            <button id="apply-filters" class="btn btn-primary">–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
        </div>
    </div>
</div>

<!-- –ì—Ä–∞—Ñ–∏–∫–∏ -->
<div class="charts-grid">
    <!-- –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á -->
    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞ –ø–µ—Ä–∏–æ–¥</h3>
            <div class="chart-controls">
                <button class="chart-type-btn active" data-chart="creation" data-type="line">–õ–∏–Ω–∏—è</button>
                <button class="chart-type-btn" data-chart="creation" data-type="bar">–°—Ç–æ–ª–±—Ü—ã</button>
            </div>
        </div>
        <div class="chart-container">
            <canvas id="creationChart"></canvas>
            <div id="creationLoading" class="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
        </div>
    </div>

    <!-- –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è -->
    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ vs –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ</h3>
            <div class="chart-controls">
                <button class="chart-type-btn active" data-chart="completion" data-type="pie">–ö—Ä—É–≥</button>
                <button class="chart-type-btn" data-chart="completion" data-type="bar">–°—Ç–æ–ª–±—Ü—ã</button>
            </div>
        </div>
        <div class="chart-container">
            <canvas id="completionChart"></canvas>
            <div id="completionLoading" class="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
        </div>
    </div>

    <!-- –ì—Ä–∞—Ñ–∏–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º -->
    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">–ó–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º</h3>
            <div class="chart-controls">
                <button class="chart-type-btn active" data-chart="priority" data-type="bar">–°—Ç–æ–ª–±—Ü—ã</button>
                <button class="chart-type-btn" data-chart="priority" data-type="pie">–ö—Ä—É–≥</button>
            </div>
        </div>
        <div class="chart-container">
            <canvas id="priorityChart"></canvas>
            <div id="priorityLoading" class="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
        </div>
    </div>

    <!-- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ -->
    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏</h3>
        </div>
        <div class="chart-container">
            <canvas id="weeklyChart"></canvas>
            <div id="weeklyLoading" class="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>
        </div>
    </div>


</div>
@endsection

@section('scripts')
<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    'use strict';

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    const charts = {};

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initializeCharts();
    setupEventListeners();

    function initializeCharts() {
        loadChart('creation', 'line');
        loadChart('completion', 'pie');
        loadChart('priority', 'bar');
        loadChart('weekly', 'bar');

    }

    function setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        document.querySelectorAll('.chart-type-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const chartName = this.dataset.chart;
                const chartType = this.dataset.type;

                // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
                this.parentElement.querySelectorAll('.chart-type-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                loadChart(chartName, chartType);
            });
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        document.getElementById('apply-filters').addEventListener('click', function() {
            initializeCharts();
        });
    }

    async function loadChart(chartName, chartType) {
        const canvas = document.getElementById(chartName + 'Chart');
        const loading = document.getElementById(chartName + 'Loading');

        if (!canvas || !loading) return;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        canvas.style.display = 'none';
        loading.style.display = 'flex';

        try {
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥—Ä–∞—Ñ–∏–∫
            if (charts[chartName]) {
                charts[chartName].destroy();
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            const data = await fetchChartData(chartName, chartType);

            if (data.success) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if (data.data && (data.data.labels?.length > 0 || data.data.datasets?.some(d => d.data?.length > 0))) {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
                    const ctx = canvas.getContext('2d');
                    charts[chartName] = new Chart(ctx, {
                        ...data.config,
                        data: data.data
                    });

                    // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
                    loading.style.display = 'none';
                    canvas.style.display = 'block';
                } else {
                    // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    loading.innerHTML = '<div style="color: #999; text-align: center;"><div style="font-size: 3rem; margin-bottom: 10px;">üìä</div><div>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div><div style="font-size: 0.9rem; margin-top: 5px;">–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Ç–µ–≥–∞–º–∏</div></div>';
                }
            } else {
                throw new Error(data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
            loading.innerHTML = `
                <div style="color: #e74c3c; text-align: center;">
                    <div style="font-size: 2rem; margin-bottom: 10px;">‚ö†Ô∏è</div>
                    <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
                    <div style="font-size: 0.8rem; margin-top: 5px; color: #999;">
                        ${error.message}
                    </div>
                    <button onclick="location.reload()" style="margin-top: 10px; padding: 5px 10px; border: none; background: #667eea; color: white; border-radius: 5px; cursor: pointer;">
                        –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    </button>
                </div>
            `;
        }
    }

    async function fetchChartData(chartName, chartType) {
        const filters = getFilters();
        const params = new URLSearchParams({
            chart_type: chartType,
            ...filters
        });

        const endpoints = {
            'creation': '/analytics/task-creation-chart',
            'completion': '/analytics/completion-chart',
            'priority': '/analytics/priority-chart',
            'weekly': '/analytics/weekly-activity-chart'
        };

        const url = `${endpoints[chartName]}?${params}`;
        console.log('Fetching chart data from:', url);

        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
            },
            credentials: 'same-origin'
        });

        if (!response.ok) {
            console.error('Response not OK:', response.status, response.statusText);
            const errorText = await response.text();
            console.error('Error response:', errorText);
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('Chart data received:', data);
        return data;
    }

    function getFilters() {
        return {
            period: document.getElementById('period').value
        };
    }
});
</script>
@endsection
